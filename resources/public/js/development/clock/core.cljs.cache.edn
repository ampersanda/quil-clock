{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name clock.core, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware}, :cljs.spec/speced-vars [], :uses nil, :defs {setup {:protocol-inline nil, :meta {:file "/Users/dana/Downloads/clock/src/clock/core.cljs", :line 5, :column 7, :end-line 5, :end-column 12, :arglists (quote ([]))}, :name clock.core/setup, :variadic false, :file "src/clock/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, draw-state {:protocol-inline nil, :meta {:file "/Users/dana/Downloads/clock/src/clock/core.cljs", :line 10, :column 7, :end-line 10, :end-column 17, :arglists (quote ([state]))}, :name clock.core/draw-state, :variadic false, :file "src/clock/core.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, run-sketch {:protocol-inline nil, :meta {:file "/Users/dana/Downloads/clock/src/clock/core.cljs", :line 64, :column 16, :end-line 64, :end-column 26, :export true, :arglists (quote ([]))}, :name clock.core/run-sketch, :variadic false, :file "src/clock/core.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, clock {:protocol-inline nil, :meta {:file "/Users/dana/Downloads/clock/src/clock/core.cljs", :line 65, :column 16, :end-line 65, :end-column 21, :export true, :arglists (quote ([]))}, :name clock.core/clock, :variadic false, :file "src/clock/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 3, :line 65, :end-line 65, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :cljs.spec/registry-ref [], :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:fn :rgb :size :setup :middleware :host :host-id :no-start :draw}, :order [:rgb :host :size :setup :middleware :draw :no-start :fn :host-id]}, :doc nil}